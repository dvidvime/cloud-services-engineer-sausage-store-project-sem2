apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: "mongo:{{ .Values.mongodb.mongodbVersion }}"
        envFrom:
          - configMapRef:
              name: mongodb-conf
        ports:
        - containerPort: {{ .Values.mongodb.containerPort }}
        resources:
          requests:
            memory: {{ .Values.mongodb.resources.requests.memory }}
            cpu: {{ .Values.mongodb.resources.requests.cpu }}
          limits:
            memory: {{ .Values.mongodb.resources.limits.memory }}
            cpu: {{ .Values.mongodb.resources.limits.cpu }}
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-init
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
      volumes:
      - name: mongodb-init
        configMap:
          name: mongodb-init
          items:
          - key: init-mongo.js
            path: init-mongo.js
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.mongodb.storageSize }}

---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  labels:
    app: mongodb
spec:
  ports:
  - port: {{ .Values.mongodb.containerPort }}
    targetPort: {{ .Values.mongodb.containerPort }}
  selector:
    app: mongodb
  clusterIP: None

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-conf
data:
  MONGO_INITDB_ROOT_USERNAME: {{ .Values.mongodb.env.MONGO_INITDB_ROOT_USERNAME }}
  MONGO_INITDB_ROOT_PASSWORD: {{ .Values.mongodb.env.MONGO_INITDB_ROOT_PASSWORD }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init
data:
  init-mongo.js: |
    db = db.getSiblingDB('{{ .Values.mongodb.env.db }}');

    // Create a regular user for the application
    db.createUser({
      user: '{{ .Values.mongodb.env.dbUser }}',
      pwd: '{{ .Values.mongodb.env.dbPassword }}',
      roles: [
        {
          role: 'readWrite',
          db: '{{ .Values.mongodb.env.db }}'
        }
      ]
    });