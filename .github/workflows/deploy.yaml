name: Sausage Store Deploy

on:
  push:
    branches:
      - main

env:
  NEXUS_HELM_REPO: ${{ vars.NEXUS_HELM_REPO }}
  NEXUS_HELM_REPO_USER: ${{ secrets.NEXUS_HELM_REPO_USER }}
  NEXUS_HELM_REPO_PASSWORD: ${{ secrets.NEXUS_HELM_REPO_PASSWORD }}
  SAUSAGE_STORE_NAMESPACE: ${{ vars.SAUSAGE_STORE_NAMESPACE }}
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
  APP_VERSION: 1.0.0
  #VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
  CHART_PATH: ./sausage-store-chart

jobs:
  # Сборка и пуш образов в докерхаб:
  build_and_push_to_docker_hub:
      name: Push Docker image to DockerHub
      runs-on: ubuntu-latest
      steps:
        - name: Check out the repo
          # Получение исходного кода из репозитория:
          uses: actions/checkout@v3
        - name: Set up Docker Buildx
          # Установка сборщика контейнеров Docker:
          uses: docker/setup-buildx-action@v2
        - name: Login to Docker 
          # Авторизация на Docker Hub:
          uses: docker/login-action@v2
          # При помощи with передаём в action параметры username и password:
          with:
            username: ${{ secrets.DOCKER_USER }}
            password: ${{ secrets.DOCKER_PASSWORD }}
            # Хорошо ли держать логин и пароль прямо в коде workflow?
            # Нет, это нехорошо. Хранить пароль надо в Secrets.
        - name: Push Backend to DockerHub
          # Одновременный билд и пуш образа в Docker Hub:
          uses: docker/build-push-action@v4
          with:
            # Параметр context: ./backend/ указывает, что нужный Dockerfile 
            # находится в ./backend/
            context: ./backend/
            # Параметр push: true указывает, что образ нужно не только собрать,
            # но и отправить на Docker Hub:
            push: true
            # В параметре tags задаётся название и тег для образа.
            # Для каждого пересобранного образа 
            # устанавливаем тег latest, чтобы потом
            # на сервере и в docker-compose.yml не указывать версию образа:
            tags: ${{ secrets.DOCKER_USER }}/sausage-backend:${{ env.APP_VERSION }}
            build-args: |
              VERSION=${{ env.APP_VERSION }}
        - name: Push Frontend to DockerHub
          uses: docker/build-push-action@v4
          with:
            context: ./frontend/
            push: true
            tags: ${{ secrets.DOCKER_USER }}/sausage-frontend:${{ env.APP_VERSION }}
        - name: Push Backend-report to DockerHub
          uses: docker/build-push-action@v4
          with:
            context: ./backend-report/
            push: true
            tags: ${{ secrets.DOCKER_USER }}/sausage-backend-report:${{ env.APP_VERSION }}

  # Упаковываем helm-чарт и пушим его в Nexus
  add_helm_chart_to_nexus:
      name: Add Helm Chart To Nexus
      runs-on: ubuntu-latest
      needs: build_and_push_to_docker_hub
      outputs:
        chart-name: ${{ steps.chart.outputs.name }}
        chart-version: ${{ steps.chart.outputs.version }}
        chart-pkg: ${{ steps.chart.outputs.pkg }}

      steps:
          - name: Checkout repository
            uses: actions/checkout@v4

          - name: Install Helm
            uses: azure/setup-helm@v3
            with:
              version: 'latest'

          - name: Package Helm Chart
            id: chart
            run: |
              helm dependency update ${{ env.CHART_PATH }}
              helm package ${{ env.CHART_PATH }}
              CHART_PKG=$(ls *.tgz)
              CHART_NAME=$(helm show chart $CHART_PKG | grep '^name:' | awk '{print $2}')
              CHART_VERSION=$(helm show chart $CHART_PKG | grep '^version:' | awk '{print $2}')
              echo "pkg=$CHART_PKG" >> $GITHUB_OUTPUT
              echo "name=$CHART_NAME" >> $GITHUB_OUTPUT
              echo "version=$CHART_VERSION" >> $GITHUB_OUTPUT

          - name: Upload Chart to Nexus Repository
            run: |
              curl -u ${{ env.NEXUS_HELM_REPO_USER }}:${{ env.NEXUS_HELM_REPO_PASSWORD }} \
                --upload-file $CHART_PKG \
                ${{ env.NEXUS_HELM_REPO }}/${{ env.CHART_PACKAGE }}
              echo "Helm chart uploaded to Nexus repository: ${{ env.NEXUS_HELM_REPO }}/$CHART_PKG"

  # Деплоим приложения в кластер Kubernetes с помощью helm-чарт
  deploy_helm_chart_to_kubernetes:
      name: Deploy Helm Chart To Kubernetes
      runs-on: ubuntu-latest
      needs: add_helm_chart_to_nexus

      steps:
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Setup Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ env.KUBE_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Add Nexus Helm Repository
        run: |
          helm repo add nexus ${{ env.NEXUS_HELM_REPO }} \
            --username ${{ env.NEXUS_HELM_REPO_USER }} \
            --password ${{ env.NEXUS_HELM_REPO_PASSWORD }}
          helm repo update

      - name: Deploy to Kubernetes
        run: |
          helm upgrade --install sausage \
            nexus/${{ needs.add_helm_chart_to_nexus.outputs.chart-name }} \
            --version ${{ needs.add_helm_chart_to_nexus.outputs.chart-version }} \
            --namespace ${{ env.SAUSAGE_STORE_NAMESPACE }} \
            --wait \
            --timeout 10m

      - name: Verify Deployment
        run: |
          kubectl get all -n ${{ env.SAUSAGE_STORE_NAMESPACE }}
